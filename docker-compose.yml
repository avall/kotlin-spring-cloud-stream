version: '3.8'

services:
  db:
    container_name: kotlin-spring-cloud-stream-postgress
    image: postgres:alpine
    ports:
      - "5432:5432"
    environment:
      POSTGRES_USER: 'user'
      POSTGRES_DB: 'claimDB'
      POSTGRES_PASSWORD: 'password'

  keycloak:
    container_name: kotlin-spring-cloud-stream-keycloak
    image: quay.io/keycloak/keycloak:latest
    environment:
      DB_VENDOR: POSTGRES
      DB_ADDR: db
      DB_DATABASE: claimDB
      DB_USER: user
      DB_SCHEMA: public
      DB_PASSWORD: password
      KEYCLOAK_USER: admin
      KEYCLOAK_PASSWORD: admin
      # Uncomment the line below if you want to specify JDBC parameters. The parameter below is just an example, and it shouldn't be used in production without knowledge. It is highly recommended that you read the PostgreSQL JDBC driver documentation in order to use it.
      #JDBC_PARAMS: "ssl=true"
    ports:
      - 8880:8080
    depends_on:
      - db


#  kotlin:
#    container_name: kotlin-spring-cloud-stream-kotlin
#    build:
#      context: .
#      dockerfile: Dockerfile
#      args:
#        USERNAME: user
#        PASSWORD: password
#    volumes:
#      - .:/app
#      - ~/.m2:/root/.m2
#    working_dir: /app
#    ports:
#      - 8080:8080
#      - 5005:5005
#    command: >
#      bash -c "chmod +x ./docker/start.sh && chmod +x ./docker/wait-for-it.sh && ./docker/start.sh consumer"
##      bash -c "gradle assemble && java -jar -Xss1024k  -Xms128m  -Xmx128m  -XX:+UnlockExperimentalVMOptions  -XX:+UseCGroupMemoryLimitForHeap -XX:CICompilerCount=2 -XX:+UseG1GC   -XX:+UseStringDeduplication   -XX:MaxGCPauseMillis=1000  -XX:+ParallelRefProcEnabled   -XX:+PrintReferenceGC  -XX:G1HeapRegionSize=4m application/build/libs/application-1.0.0.jar"
##    command: >
##      bash -c "/wait-for-it.sh --timeout=0 kibana:5601 && /wait-for-it.sh --timeout=0 logstash:5002 && /wait-for-it.sh --timeout=0 elasticsearch:9200 && /wait-for-it.sh --timeout=0 kafka:9092 && /wait-for-it.sh --timeout=0 zookeeper:2181 && /wait-for-it.sh --timeout=0 keycloak:8880 && /wait-for-it.sh --timeout=0 db:5432 && /wait-for-it.sh --timeout=0 kafka:29092 && ./gradlew assemble && java -jar -Xss1024k  -Xms128m  -Xmx128m  -XX:+UnlockExperimentalVMOptions  -XX:+UseCGroupMemoryLimitForHeap -XX:CICompilerCount=2 -XX:+UseG1GC   -XX:+UseStringDeduplication   -XX:MaxGCPauseMillis=1000  -XX:+ParallelRefProcEnabled   -XX:+PrintReferenceGC  -XX:G1HeapRegionSize=4m /application/build/libs/application-1.0.0.jar"
#
##    entrypoint: ["./app/start.sh'"]
##    entrypoint: ["/bin/sh", "-c", "'./wait-for-it.sh --timeout=0 kibana:5601 && ./wait-for-it.sh --timeout=0 logstash:5002 && ./wait-for-it.sh --timeout=0 elasticsearch:9200 && ./wait-for-it.sh --timeout=0 kafka:9092 && ./wait-for-it.sh --timeout=0 zookeeper:2181 && ./wait-for-it.sh --timeout=0 keycloak:8880 && ./wait-for-it.sh --timeout=0 db:5432 && ./wait-for-it.sh --timeout=0 kafka:29092 && ./start.sh'"]
#    #    command: mvn clean spring-boot:run
##    command: >
##      bash -c "/wait-for-it.sh --timeout=0 kibana:5601 && /wait-for-it.sh --timeout=0 logstash:5002 && /wait-for-it.sh --timeout=0 elasticsearch:9200 && /wait-for-it.sh --timeout=0 kafka:9092 && /wait-for-it.sh --timeout=0 zookeeper:2181 && /wait-for-it.sh --timeout=0 keycloak:8880 && /wait-for-it.sh --timeout=0 db:5432 && /wait-for-it.sh --timeout=0 kafka:29092 && ./gradlew assemble && java -jar -Xss1024k  -Xms128m  -Xmx128m  -XX:+UnlockExperimentalVMOptions  -XX:+UseCGroupMemoryLimitForHeap -XX:CICompilerCount=2 -XX:+UseG1GC   -XX:+UseStringDeduplication   -XX:MaxGCPauseMillis=1000  -XX:+ParallelRefProcEnabled   -XX:+PrintReferenceGC  -XX:G1HeapRegionSize=4m /application/build/libs/application-1.0.0.jar"
#    ##      bash -c "/docker_virtual_ms_data/wait-for-it.sh --timeout=0 redis:6379 eureka:8300 && mvn -Dmaven.test.skip=true spring-boot:run"
#    depends_on:
#      - broker
#      - db


  zookeeper:
    container_name: kotlin-spring-cloud-stream-zookeeper
    image: confluentinc/cp-zookeeper:5.5.1
    hostname: zookeeper
    ports:
      - "2181:2181"
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
      ALLOW_ANONYMOUS_LOGIN: "yes"

  broker:
    container_name: kotlin-spring-cloud-stream-broker
    image: confluentinc/cp-server:5.5.1
    hostname: broker
    depends_on:
      - zookeeper
    ports:
      - "9094:9094"
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://broker:9092,PLAINTEXT_HOST://localhost:9094
      KAFKA_METRIC_REPORTERS: io.confluent.metrics.reporter.ConfluentMetricsReporter
      KAFKA_INTER_BROKER_LISTENER_NAME: PLAINTEXT
      KAFKA_AUTO_CREATE_TOPICS_ENABLE: "true"
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_GROUP_INITIAL_REBALANCE_DELAY_MS: 0
      KAFKA_CONFLUENT_LICENSE_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 1
      KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 1
      KAFKA_LOG4J_LOGGERS: "kafka.controller=INFO,kafka.producer.async.DefaultEventHandler=INFO,state.change.logger=INFO"
      CONFLUENT_METRICS_REPORTER_BOOTSTRAP_SERVERS: broker:9092
      CONFLUENT_METRICS_REPORTER_ZOOKEEPER_CONNECT: zookeeper:2181
      CONFLUENT_METRICS_REPORTER_TOPIC_REPLICAS: 1
      CONFLUENT_METRICS_ENABLE: "true"
      CONFLUENT_SUPPORT_CUSTOMER_ID: "anonymous"
  #      KAFKA_JMX_PORT: 9999
  #      KAFKA_JMX_HOSTNAME: 127.0.0.1

  control-center:
    container_name: kotlin-spring-cloud-stream-control-center
    image: confluentinc/cp-enterprise-control-center:5.5.1
    hostname: control-center
    depends_on:
      - zookeeper
      - broker
#      - schema-registry
    #      - connect
    #      - ksqldb
    ports:
      - "9021:9021"
    environment:
      CONTROL_CENTER_BOOTSTRAP_SERVERS: 'broker:9092'
      CONTROL_CENTER_ZOOKEEPER_CONNECT: zookeeper:2181
      #      CONTROL_CENTER_CONNECT_CLUSTER: 'connect:8083'
      #      CONTROL_CENTER_KSQL_KSQLDB1_URL: "http://ksqldb:8088"
      #      CONTROL_CENTER_KSQL_KSQLDB1_ADVERTISED_URL: "http://localhost:8088"
#      CONTROL_CENTER_SCHEMA_REGISTRY_URL: http://schema-registry:8084
      CONTROL_CENTER_REPLICATION_FACTOR: 1
      CONTROL_CENTER_INTERNAL_TOPICS_PARTITIONS: 1
      CONTROL_CENTER_MONITORING_INTERCEPTOR_TOPIC_PARTITIONS: 1
      CONFLUENT_METRICS_TOPIC_REPLICATION: 1
      PORT: 9021














  kafdrop:
    #    image: obsidiandynamics/kafdrop
    container_name: kotlin-spring-cloud-stream-kafdrop
    build:
      context: ./docker/kafdrop
      dockerfile: Dockerfile_kafdrop
    restart: "no"
    ports:
      - "9000:9000"
    environment:
      KAFKA_BROKERCONNECT: "broker:9092"
#      SCHEMAREGISTRY_CONNECT: "http://schema-registry:8081"
      JVM_OPTS: "-Xms16M -Xmx48M -Xss180K -XX:-TieredCompilation -XX:+UseStringDeduplication -noverify"
    depends_on:
      - broker
#    command: >
#      bash -c "./wait-for-it.sh --timeout=0 broker:9092 && ./kafdrop.sh"


  #########################################
  #           ELK
  #########################################
  elasticsearch:
    container_name: kotlin-spring-cloud-stream-elasticsearch
    user: elasticsearch:elasticsearch
    build:
      context: docker/elasticsearch/
      dockerfile: ./Dockerfile
      args:
        ELK_VERSION: 7.5.1
    volumes:
      - ./docker/:/virtual_elastic
      - type: bind
        source: ./docker/elasticsearch/config/elasticsearch.yml
        target: /usr/share/elasticsearch/config/elasticsearch.yml
        read_only: true
      - type: volume
        source: elasticsearch
        target: /usr/share/elasticsearch/data
    ports:
      - "9200:9200"
      - "9300:9300"
    environment:
      ES_JAVA_OPTS: "-Xmx256m -Xms256m"
      ELASTIC_PASSWORD: changeme
      ALLOW_INSECURE_DEFAULT_TLS_CERT: "true"
    command: >
      bash -c "/usr/local/bin/docker-entrypoint.sh"

  logstash:
    container_name: kotlin-spring-cloud-stream-logstash
    build:
      context: docker/logstash/
      dockerfile: ./Dockerfile
      args:
        ELK_VERSION: 7.5.1
    volumes:
      - ./docker/:/virtual_logstash
      - type: bind
        source: ./docker/logstash/config/logstash.yml
        target: /usr/share/logstash/config/logstash.yml
        read_only: true
      - type: bind
        source: ./docker/logstash/pipeline
        target: /usr/share/logstash/pipeline
        read_only: true
    ports:
      - "5002:5002"
      - "9600:9600"
    environment:
      LS_JAVA_OPTS: "-Xmx512m -Xms512m"
    depends_on:
      - elasticsearch
    command: >
      bash -c "/usr/local/bin/docker-entrypoint"

  kibana:
    container_name: kotlin-spring-cloud-stream-kibana
    build:
      context: docker/kibana/
      dockerfile: ./Dockerfile
      args:
        ELK_VERSION: 7.5.1
    volumes:
      - ./docker/:/virtual_kibana
      - type: bind
        source: ./docker/kibana/config/kibana.yml
        target: /usr/share/kibana/config/kibana.yml
        read_only: true
    ports:
      - "5601:5601"
    depends_on:
      - elasticsearch
    command: >
      bash -c "/usr/local/bin/kibana-docker"

volumes:
  elasticsearch:
